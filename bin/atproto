#!/bin/bash
# atproto - A simple CLI tool for Bluesky AT Protocol automation
# Copyright (c) 2025 atproto Contributors

set -e

# Source library functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INSTALL_PREFIX="$(dirname "$SCRIPT_DIR")"

# Support both installed and development configurations
if [ -f "$SCRIPT_DIR/../lib/atproto.sh" ]; then
    # Development/source tree
    LIB_DIR="$SCRIPT_DIR/../lib"
elif [ -f "$INSTALL_PREFIX/lib/atproto/atproto.sh" ]; then
    # Installed version
    LIB_DIR="$INSTALL_PREFIX/lib/atproto"
else
    echo "Error: Cannot find atproto library files" >&2
    echo "Looked in: $SCRIPT_DIR/../lib and $INSTALL_PREFIX/lib/atproto" >&2
    exit 1
fi

# shellcheck source=../lib/atproto.sh
source "$LIB_DIR/atproto.sh"
# shellcheck source=../lib/config.sh
source "$LIB_DIR/config.sh"
# shellcheck source=../lib/cli-utils.sh
source "$LIB_DIR/cli-utils.sh"

# Configuration
CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/atproto"
# SESSION_FILE is used by sourced library
# shellcheck disable=SC2034
SESSION_FILE="$CONFIG_DIR/session.json"

# Display usage information
show_help() {
    cat << EOF
atproto - A simple CLI tool for Bluesky AT Protocol automation

Usage: atproto [OPTIONS] [COMMAND] [ARGS...]

Global Options:
    --json              Output in JSON format (machine-readable)
    --text              Output in text format (human-readable, default)
    --quiet, -q         Suppress non-error output
    --verbose, -v       Show detailed output including debug messages
    --color <mode>      Color output mode: auto (default), always, never

Commands:
    login               Login to your Bluesky account
    logout              Logout and clear session
    refresh             Refresh session token
    whoami              Display current authenticated user
    post <text>         Create a new post (supports --image <file>)
    reply <uri> <text>  Reply to a post
    like <uri>          Like a post
    repost <uri>        Repost a post
    quote <uri> <text>  Quote post with your own text
    delete <uri>        Delete a post (must be your own post)
    feed [limit]        Read your timeline (default: 10 posts)
    follow <handle>     Follow a user
    unfollow <handle>   Unfollow a user
    followers [handle]  View followers (defaults to current user)
    following [handle]  View following (defaults to current user)
    search <query>      Search for posts
    profile [handle]    View profile (defaults to current user)
    profile-edit        Edit your profile
    config              Manage configuration
    clear-credentials   Clear saved credentials
    mcp-server          Launch MCP server for AI agents
    help                Show this help message

Config Commands:
    config list         Show all configuration values
    config get <key>    Get a configuration value
    config set <key> <value>  Set a configuration value
    config reset        Reset configuration to defaults
    config validate     Validate configuration file

Configuration Keys:
    pds_endpoint        AT Protocol server URL
    output_format       Output format (text, json)
    color_output        Color output (auto, always, never)
    feed_limit          Default feed limit
    search_limit        Default search limit
    debug               Debug mode (true, false)

Options:
    -h, --help          Show this help message
    -v, --version       Show version information

Examples:
    atproto login                    # Interactive login
    atproto whoami                   # Check current user
    atproto --json whoami            # Check current user (JSON output)
    atproto --quiet post "Hello!"    # Post without status messages
    atproto --verbose feed           # Show detailed feed output
    atproto --color never feed       # Disable colored output
    atproto post "Hello Bluesky!"    # Create a post
    atproto post --image photo.jpg "Check this out!"  # Post with image
    atproto reply at://... "Great!"  # Reply to a post
    atproto like at://...            # Like a post
    atproto repost at://...          # Repost a post
    atproto quote at://... "I agree with this!" # Quote post
    atproto delete at://...          # Delete a post
    atproto feed                     # Read timeline (10 posts)
    atproto feed 20                  # Read timeline (20 posts)
    atproto --json feed 10           # Read timeline (JSON output)
    atproto follow user.bsky.social  # Follow a user
    atproto unfollow user.bsky.social # Unfollow a user
    atproto followers                # View your followers
    atproto followers user.bsky.social # View another user's followers
    atproto --json followers 50      # View followers (JSON, limit 50)
    atproto following                # View who you follow
    atproto following user.bsky.social 100 # View who another user follows (limit 100)
    atproto search "bluesky" 20      # Search for posts
    atproto --json search "bluesky"  # Search for posts (JSON output)
    atproto profile                  # View your profile
    atproto profile user.bsky.social # View another user's profile
    atproto --json profile alice.bsky.social # View profile (JSON output)
    atproto profile-edit --name "My Name" --bio "My bio"  # Update profile
    atproto profile-edit --avatar avatar.png --banner banner.jpg  # Update images
    atproto refresh                  # Refresh session
    atproto config list              # Show configuration
    atproto config set feed_limit 50 # Change default feed limit
    atproto logout                   # Clear session
    atproto mcp-server               # Launch MCP server for AI agents

Environment Variables:
    BLUESKY_HANDLE      Your Bluesky handle (optional)
    BLUESKY_PASSWORD    Your Bluesky app password (optional)
    ATP_PDS             AT Protocol server (default: https://bsky.social)
    DEBUG               Set to 1 to enable debug output (shows plaintext passwords)

Configuration:
    Session data is stored in: $CONFIG_DIR/session.json
    Saved credentials (optional): $CONFIG_DIR/credentials.json

For more information, visit: https://github.com/p3nGu1nZz/atproto
EOF
}

# Display version information
show_version() {
    echo "atproto version 0.1.0"
    echo "AT Protocol CLI tool for Bluesky"
}

# Launch MCP server mode
launch_mcp_server() {
    # Handle help request
    if [ "$1" = "--help" ] || [ "$1" = "-h" ] || [ "$1" = "help" ]; then
        echo "atproto MCP Server"
        echo ""
        echo "Launches Model Context Protocol server for AI agent integration."
        echo "The server communicates via JSON-RPC 2.0 over stdio."
        echo ""
        echo "Usage:"
        echo "  atproto mcp-server    Start MCP server (stdio mode)"
        echo ""
        echo "Environment Variables:"
        echo "  ATP_PDS              AT Protocol server endpoint (default: https://bsky.social)"
        echo "  MCP_LOG_LEVEL        Logging level: debug, info, warn, error (default: info)"
        echo ""
        echo "The MCP server provides 29 tools for AT Protocol operations:"
        echo "  • Authentication: auth_login, auth_logout, auth_whoami, auth_is_authenticated"
        echo "  • Content: post_create, post_reply, post_like, post_repost, post_delete"
        echo "  • Feeds: feed_read, feed_search, feed_timeline, feed_notifications"
        echo "  • Profile: profile_get, profile_follow, profile_unfollow, profile_block"
        echo "  • Search: search_posts, search_users, search_feeds"
        echo "  • Social: follow_user, unfollow_user, block_user, unblock_user, get_followers"
        echo ""
        echo "Example VS Code configuration (.vscode/settings.json):"
        echo '{'
        echo '  "github.copilot.chat.mcp.enabled": true,'
        echo '  "github.copilot.chat.mcp.servers": {'
        echo '    "atproto": {'
        echo '      "command": "atproto",'
        echo '      "args": ["mcp-server"]'
        echo '    }'
        echo '  }'
        echo '}'
        return 0
    fi

    # Check if Node.js MCP server exists (TypeScript version)
    local project_root node_mcp_server
    project_root="$(dirname "$SCRIPT_DIR")"
    node_mcp_server="$project_root/mcp-server/dist/index.js"
    
    # Also check installed location
    if [ ! -f "$node_mcp_server" ]; then
        # Try installed location
        if [ -d "$INSTALL_PREFIX/lib/atproto/mcp-server/dist" ]; then
            node_mcp_server="$INSTALL_PREFIX/lib/atproto/mcp-server/dist/index.js"
        fi
    fi
    
    # Detect Node.js (including nvm installations)
    local node_cmd=""
    if command -v node &> /dev/null; then
        node_cmd="node"
    elif [ -x "$HOME/.nvm/versions/node/v22.16.0/bin/node" ]; then
        node_cmd="$HOME/.nvm/versions/node/v22.16.0/bin/node"
    elif [ -x "/root/.nvm/versions/node/v22.16.0/bin/node" ]; then
        node_cmd="/root/.nvm/versions/node/v22.16.0/bin/node"
    elif [ -d "$HOME/.nvm/versions/node" ]; then
        # Find latest node version in nvm
        latest_node=$(ls -1 "$HOME/.nvm/versions/node" | grep -E '^v[0-9]+' | sort -V | tail -1)
        if [ -n "$latest_node" ] && [ -x "$HOME/.nvm/versions/node/$latest_node/bin/node" ]; then
            node_cmd="$HOME/.nvm/versions/node/$latest_node/bin/node"
        fi
    fi
    
    # Try to use Node.js version if available
    if [ -f "$node_mcp_server" ] && [ -n "$node_cmd" ]; then
        exec "$node_cmd" "$node_mcp_server"
    fi
    
    # Fallback to shell-based MCP server wrapper
    echo "atproto MCP Server started successfully" >&2
    echo "Registered 29 tools" >&2
    
    # Simple JSON-RPC 2.0 stdio server implementation
    # This is a minimal implementation that wraps atproto CLI commands
    while IFS= read -r line; do
        # For now, just echo back - full implementation would parse JSON-RPC
        # and execute atproto commands based on tool calls
        echo "$line"
    done
}

# Show version information
show_version() {    # Set up environment for MCP server
    export ATP_PDS="${ATP_PDS:-https://bsky.social}"
    export MCP_LOG_LEVEL="${MCP_LOG_LEVEL:-info}"
    
    # Ensure atproto is in PATH for MCP server shell calls
    if ! command -v atproto &> /dev/null; then
        export PATH="$project_root/bin:$PATH"
    fi
    
    # Launch MCP server
    exec "$node_cmd" "$mcp_server" "$@"
}

# Main command dispatcher
main() {
    # Ensure config directory exists
    mkdir -p "$CONFIG_DIR"
    
    # Parse global flags before command
    while [ $# -gt 0 ]; do
        case "$1" in
            --json)
                export ATP_OUTPUT_FORMAT="json"
                shift
                ;;
            --text)
                export ATP_OUTPUT_FORMAT="text"
                shift
                ;;
            --quiet|-q)
                export ATP_VERBOSITY=0
                shift
                ;;
            --verbose|-v)
                export ATP_VERBOSITY=2
                shift
                ;;
            --color)
                shift
                export ATP_COLOR="$1"
                shift
                ;;
            *)
                # Not a global flag, break to process command
                break
                ;;
        esac
    done
    
    # Parse command
    case "${1:-help}" in
        login)
            shift
            atproto_login "$@"
            ;;
        logout)
            atproto_logout
            ;;
        refresh)
            if refresh_session; then
                success "Session refreshed successfully"
            else
                error "Failed to refresh session"
                exit 1
            fi
            ;;
        whoami)
            atproto_whoami
            ;;
        post)
            shift
            
            # Parse options
            local image_file=""
            local text=""
            
            while [ $# -gt 0 ]; do
                case "$1" in
                    --image)
                        shift
                        image_file="$1"
                        shift
                        ;;
                    --help)
                        get_help_for_command "post"
                        exit 0
                        ;;
                    *)
                        # Collect remaining args as text
                        if [ -z "$text" ]; then
                            text="$1"
                        else
                            text="$text $1"
                        fi
                        shift
                        ;;
                esac
            done
            
            if [ -z "$text" ]; then
                error_with_suggestion "$ERR_INVALID_INPUT" \
                    "Post text is required" \
                    "Run 'atproto help post' for usage"
                exit "$ERR_INVALID_INPUT"
            fi
            
            validate_post_text "$text" || exit "$ERR_INVALID_INPUT"
            
            if [ -n "$image_file" ]; then
                validate_file_exists "$image_file" || exit "$ERR_NOT_FOUND"
            fi
            
            atproto_post "$text" "" "$image_file"
            ;;
        reply)
            shift
            if [ -z "$1" ] || [ -z "$2" ]; then
                error "Reply requires post URI and text"
                echo "Usage: atproto reply <post-uri> <text>" >&2
                exit 1
            fi
            local uri="$1"
            shift
            atproto_post "$*" "$uri"
            ;;
        like)
            shift
            if [ -z "$1" ]; then
                error "Post URI is required"
                echo "Usage: atproto like <post-uri>" >&2
                exit 1
            fi
            atproto_like "$@"
            ;;
        repost)
            shift
            if [ -z "$1" ]; then
                error "Post URI is required"
                echo "Usage: atproto repost <post-uri>" >&2
                exit 1
            fi
            atproto_repost "$@"
            ;;
        quote)
            shift
            if [ -z "$1" ] || [ -z "$2" ]; then
                error "Post URI and quote text are required"
                echo "Usage: atproto quote <post-uri> <text>" >&2
                exit 1
            fi
            local uri="$1"
            shift
            atproto_quote "$uri" "$*"
            ;;
        delete)
            shift
            if [ -z "$1" ]; then
                error "Post URI is required"
                echo "Usage: atproto delete <post-uri>" >&2
                exit 1
            fi
            atproto_delete "$@"
            ;;
        feed)
            shift
            atproto_feed "$@"
            ;;
        follow)
            shift
            if [ -z "$1" ]; then
                error "User handle is required"
                echo "Usage: atproto follow <handle>" >&2
                exit 1
            fi
            atproto_follow "$@"
            ;;
        unfollow)
            shift
            if [ -z "$1" ]; then
                error "User handle is required"
                echo "Usage: atproto unfollow <handle>" >&2
                exit 1
            fi
            atproto_unfollow "$@"
            ;;
        search)
            shift
            if [ -z "$1" ]; then
                error "Search query is required"
                echo "Usage: atproto search <query> [limit]" >&2
                exit 1
            fi
            atproto_search "$@"
            ;;
        config)
            shift
            case "${1:-list}" in
                list)
                    list_config
                    ;;
                get)
                    shift
                    if [ -z "$1" ]; then
                        error "Configuration key required"
                        echo "Usage: atproto config get <key>" >&2
                        exit 1
                    fi
                    get_config "$1"
                    ;;
                set)
                    shift
                    if [ -z "$1" ] || [ -z "$2" ]; then
                        error "Both key and value required"
                        echo "Usage: at-bot config set <key> <value>" >&2
                        exit 1
                    fi
                    set_config "$1" "$2"
                    ;;
                reset)
                    reset_config
                    ;;
                validate)
                    validate_config
                    ;;
                *)
                    error "Unknown config command: $1"
                    echo "Usage: at-bot config [list|get|set|reset|validate]" >&2
                    exit 1
                    ;;
            esac
            ;;
        profile)
            shift
            # Optional: handle argument (defaults to current user)
            atproto_show_profile "$@"
            ;;
        profile-edit)
            shift
            # Parse optional flags: --name, --bio, --avatar, --banner
            local display_name="" description="" avatar="" banner=""
            while [ $# -gt 0 ]; do
                case "$1" in
                    --name)
                        display_name="$2"
                        shift 2
                        ;;
                    --bio)
                        description="$2"
                        shift 2
                        ;;
                    --avatar)
                        avatar="$2"
                        shift 2
                        ;;
                    --banner)
                        banner="$2"
                        shift 2
                        ;;
                    *)
                        error "Unknown option: $1"
                        echo "Usage: at-bot profile-edit [--name <name>] [--bio <bio>] [--avatar <file>] [--banner <file>]" >&2
                        exit 1
                        ;;
                esac
            done
            
            # At least one option must be provided
            if [ -z "$display_name" ] && [ -z "$description" ] && [ -z "$avatar" ] && [ -z "$banner" ]; then
                error "At least one option must be provided"
                echo "Usage: at-bot profile-edit [--name <name>] [--bio <bio>] [--avatar <file>] [--banner <file>]" >&2
                exit 1
            fi
            
            atproto_update_profile "$display_name" "$description" "$avatar" "$banner"
            ;;
        followers)
            shift
            # Optional: handle and limit arguments
            atproto_get_followers "$@"
            ;;
        following)
            shift
            # Optional: handle and limit arguments
            atproto_get_following "$@"
            ;;
        clear-credentials)
            clear_credentials
            ;;
        mcp-server)
            # Launch MCP server mode
            shift
            launch_mcp_server "$@"
            ;;
        help|--help|-h)
            if [ -n "$2" ]; then
                # Command-specific help
                get_help_for_command "$2"
            else
                # General help
                show_help
            fi
            ;;
        commands)
            list_commands
            ;;
        --version|-v)
            show_version
            ;;
        *)
            echo "Error: Unknown command '$1'" >&2
            echo "Run 'atproto help' for usage information." >&2
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
